Architecture
============

The pool is composed of four classes of participants: the master, its trusted delegates, the
untrusted agents, and the pool's clients.  The master has little responsiblility other than to
provide master key with which to delegate authority; it need not even be regularly connected to
the network.  The trusted delegates coordinate the actions of the agents.  The delegates provide
only those services which would be catastrophic were they under the control of a malicious actor.
The untrusted agents perform the bulk of the service: storage, retrieval, indexing, and
monitoring.  Clients use services and provide none.

# Master

In the simplest topology, there are only two actors: the master and a single delegate which
simultaneously performs all of the delegate roles.  In this configuration, the pool has no agents
and hence performs no services, and therefore has no clients.  It will, however, accept agent
registrations and become a functioning pool immediately thereafter.

# Delegates

Delegates are trusted actors; they are roughly analogous to kernel processes in a POSIX system.
They perform exactly those functions which would destroy the integrity of the pool were they to be
controlled by a malicious user.  All other functions must be left to the agents.

## Roles

### Registrar

There is only one registrar per pool.

The registrar acts as a keyserver for the pool.  With each key, the registrar keeps a small amount
of metadata about the corresponding actor (delegate or agent).  Keys are indexed by cryptographic
hash; this index is considered the id for the actor.  The specific hash function and key length
are determined by the registrar.  Additional metadata must include a value indicating the
privilege level: delegate or agent; and the standing of the actor in the pool: in compliance, on
probation, in violation, banned, or abandoned.  The registrar may optionally include time of
subscription, last time of renewal, contact information, server address and port, etc; however,
the less information the registrar provides beyond what is required, the more the actors have
their privacy and anonymity protected.  The registrar verifies none of the information provided to
it other than refusing to register keys which produce hash collisions.  Actors register with the
keyserver by sending their public key and whatever additional metadata they wish; the keyserver
may retain the metadata, but is not required to.  Actors may update their metadata at any time,
but may not update their standing.  The master's key is provided to the registrar on
initialization; it cannot be changed thereafter.  Only the master may promote an actor to a
delegate.  Only a delegate may update the status of an actor.  The registrar may require that
actors periodically renew their keys, to allow the removal of defunct keys.  In general this
should be no more often than monthly and no less often than yearly.  An actor which has failed to
respond for two or more periods may be placed into the abandoned state by the registrar, and if
the actor fails to respond for two or more periods thereafter, the registrar may drop the key.
Agents which fulfill a repository role must register an ip address and secure/unsecure ports with
the registrar.


### Manager

A manager assigns roles to agents and determines whether or not they are faithful to their
respective roles.  


# Agents

## Roles

### Repository

The repositories are the main service provider in a pool, in that they store and serve the
content. It is, however, equally important that they help to detect unfaithful behavior.  Any
actor requesting storage must pass a challenge, that its sponsor faithfully stores a randomly
chosen subset of its data equal in size to the storage it is requesting.

### Index

Translates block ids to ip address, port, and host id.

### Monitor

Logs protocol failures for agents.  When there is a pattern of failure consistent with a malicious
or malfunctioning agent, it reports the condition to the agent's manager.

# Clients
