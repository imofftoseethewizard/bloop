This proposal describes an open source, peer to peer, distributed, robust, secure, and anonymous
data storage pool.  The architecture and protocols enable individual mutually untrusted agents to
cooperate and to exchange unused local private storage for high quality distributed storage, with
reasonable assurance that free riders and malicious actors are quickly removed from the system and
that their effects are detectable, transient, and reversible.  Each pool relies crucially on a
core of actors which are trusted universally within it; would-be participants who do not trust any
existing pool's core can easily start their own.  Pools are not distributed file systems; they
more primitive, only supporting addressable persistent data.  A file system architecture may be
built on top of a pool -- indeed, that is intended; but it is not required.  In the same way that
a disk drive has no information about or interaction with the notion of a user account, pools are
not intended to have any information about nor connection with individual users; while there may
be a correlation between actors and users, nothing about the design intends this to be one to one,
and in fact, greater security and anonymity are obtained when there is not a strict one to one
mapping from users to actors.

# Pool 

A pool is a group of actors.  Actors differ in their level of authority and in the roles that they
play.  The highest authority is the single master in each pool, next are the master's delegates.
It is implicit that all actors trust the master and its delegates.  Next come the agents who are
not trusted; they are actors which provide the services of the pool.  Lastly are the clients,
consumer of services; they may be identified or anonymous.  The various roles an actor can play
depend on their authority; each authority level has a set of roles it can play, the sets pairwise
disjoint.  An actor my play several roles simultaneously.  The single master plays the master
role.  The delegates can be the registrar, or a manager.  The agents can be a repository, an
index, or a monitor.  Clients may play the client role, the administrator role, or the master
proxy role.  The master, all delegates, and all agents must have a public key registered with the
pool; they will be issued an id based on a hash of their public key.  Clients are anonymous and do
not have ids or registered keys.

# Master

The master's role is to keep the master's private key safe, to authorize delegates, and to assign
delegates to their roles.

# Delegates

## Registrar

There is only one registrar per pool.

The registrar acts as a keyserver for the pool.  All non-client actors have an id and a public key
registered under that id.  The public keys are used to establish identity by verifying message
signatures.  The id is computed from the key by cryptographic hash and possibly padding or
truncation; the registrar should make known the algorithm that maps keys to ids.

Upon registration, each agent must provide a public key, a secure ip address and port (supporting
TSL), and an insecure ip address and port.  Registrations will be refused only if the given key
results in a hash collision while computing the id.  If successful, the registrar will return the
id for the new agent.  The master's key is provided to the registrar on initialization; it cannot
be changed thereafter.

In addition to the information supplied during registration, the registrar keeps track of
privilege and standing within the pool.  Privilege will be one of master, delegate, or agent (the
default), and only the master may change the privilege level of an actor.  Status applies only to
agents; an agent may be in compliance, on probation, in violation, banned, abandoned, or
compromised, and only a delegate may update the status of an agent.  In general only agents in
compliance and on probation will receive requests from the pool.

The registrar may require that agents periodically renew their keys, to allow the removal of
defunct keys.  In general this should be no more often than monthly and no less often than yearly.
An agent which has failed to respond for two or more periods may be placed into the abandoned
state by the registrar, and if the agent fails to respond for two or more periods thereafter, the
registrar may drop the key.

## Manager

Each agent has a single manager. Managers assign roles to agents.  Agents generally play at least
the repository role.  However, agents that have higher availability may also be requested to play
the index or monitor role.  The manager determines which other agents are indexed or monitored.
In general, managers set policy, but do not participate in service delivery.  That is, agents, in
general, do not make requests of their managers, but operate autonomously based on prior
managerial guidance.  

Managers may periodically check that the keys given by the registrar do not change.

# Agents

Agents are untrusted actors which provide the services of the pool.  


## Repository

The repositories store and serve data, and are the main service providers in a pool.  It is,
however, equally important that they help to detect unfaithful behavior.  Repositories offer the
use of a block of persistent storage, and in return obtain the right to store a fraction of that
in the pool.  A repository may sponsor one or more clients, and, in effect, transfer the right to
store data in the pool to them.  

They must report various error conditions to an appropriate monitor, generally a monitor of the
counterparty to the transaction in which the error arose.

Any actor requesting storage must pass a challenge, that it or its sponsor faithfully stores a
randomly chosen subset of its data equal in size to the storage it is requesting.


## Index

An index provides mappings from block id to the list of repositories that store the block.

## Monitor

A monitor collects and aggregates errors about a set of agents.  When the errors match patterns
indicative of malicious or problematic behavior, then the monitor should report the condition to
the agent's manager.

# Clients

A client that wishes to store data in the pool must have a sponsoring agent.  That is, the client
must identify itself to an agent with which it has a prior agreement for storage.  The agent
accepts the data from the client and is responsible for selecting other selecting other agents and
storing copies of the data with them.

### Handshake

When agent B connects to agent A, agent A sends a connection id over the channel.  Agent B must
return a signed message which includes the connection id, the current time (UTC), a and the ids of
both agents.  In response, agent A sends a signed reply containing the current time and the ids of
both agents.
