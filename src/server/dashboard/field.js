// Generated by CoffeeScript 1.3.3
(function() {
  var Field, Residue,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Residue = (function() {

    function Residue() {}

    return Residue;

  })();

  Field = (function() {
    var _add, _cofactor, _div, _invmod, _lt, _mod, _mul, _shl, _shr, _size, _sub, _zeros;

    _add = Long._add, _div = Long._div, _invmod = Long._invmod, _lt = Long._lt, _mod = Long._mod, _mul = Long._mul, _shl = Long._shl, _shr = Long._shr, _size = Long._size, _sub = Long._sub, _zeros = Long._zeros;

    _cofactor = function(ms) {
      return (((new Long([0, 1])).sub([ms[0]])).invmod([0, 1])).digits[0];
    };

    function Field(M) {
      var B, FieldResidue, K, R, R2, R2_M, R_M, Rb, W;
      this.M = M = (!(M instanceof Long) ? new Long(M) : void 0).digits;
      this.K = K = _size(M);
      this.R = R = _shl([1], K);
      this.R2 = R2 = _shl([1], 2 * K);
      this.W = W = _cofactor(M);
      this.B = B = _div(R2, M);
      this.Rb = Rb = _shl([1], K + 1);
      this.R_M = R_M = _mod(R, M);
      this.R2_M = R2_M = _mod(R2, M);
      return FieldResidue = (function(_super) {
        var _modM, _mont, _negate, _pow, _reduce, _toField, _toLong;

        __extends(FieldResidue, _super);

        _modM = function(xs) {
          var qs, rs, rs_1, rs_2;
          qs = _shr(_mul(_shr(xs.slice(), K - 1), B), K + 1);
          rs_1 = xs.slice(0, K + 1);
          rs_2 = (_mul(qs, M)).slice(0, K + 1);
          if (_lt(rs_1, rs_2)) {
            _add(rs_1, Rb);
          }
          rs = _sub(rs_1, rs_2);
          while (_lt(M, rs)) {
            _sub(rs, M);
          }
          return rs;
        };

        _reduce = function(xs) {
          var i, u_i, zs, _i;
          zs = [];
          for (i = _i = 0; 0 <= K ? _i < K : _i > K; i = 0 <= K ? ++_i : --_i) {
            u_i = (_mul([xs[i]], [W]))[0];
            _add(zs, _shl(_mul(M, [u_i]), i));
          }
          _shr(zs, K);
          if (!_lt(zs, M)) {
            _sub(zs, M);
          }
          return zs;
        };

        _toField = function(xs) {
          return _modM(_shl(xs.slice(), K));
        };

        _toLong = function(xs) {
          return _reduce(xs);
        };

        _negate = function(xs) {
          if (_eq(xs, [0])) {
            return xs;
          } else {
            return _sub(M.slice(), xs);
          }
        };

        _mont = function(xs, ys) {
          var i, u_i, x_i, y_0, zs, _i;
          zs = _zeros.slice(0, K);
          y_0 = ys[0];
          for (i = _i = 0; 0 <= K ? _i < K : _i > K; i = 0 <= K ? ++_i : --_i) {
            x_i = xs[i];
            u_i = (_add([xs[0]], _mul(_mul([x_i], [y_0]), [W])))[0];
            _add(zs, _add(_mul(ys, [x_i]), _mul(M, [u_i])));
            _shr(zs, 1);
          }
          if (!_lt(zs, M)) {
            _sub(zs, M);
          }
          return zs;
        };

        _pow = function(xs, ys) {
          var i, ws, zs, _i;
          ws = _mont(xs, R2_M);
          zs = R_M.slice();
          for (i = _i = K; K <= 0 ? _i <= 0 : _i >= 0; i = K <= 0 ? ++_i : --_i) {
            zs = _mont(zs, zs);
            if (_bit(ys, i)) {
              zs = _mont(zs, ws);
            }
          }
          return _mont(zs, [1]);
        };

        function FieldResidue(x) {
          var xs;
          if (x instanceof FieldResidue) {
            this.digits = x.digits.slice();
          } else {
            if (x instanceof Residue) {
              x = x.toLong();
            }
            if (!(x instanceof Long)) {
              x = new Long(x);
            }
            xs = _toField(x.digits);
            if (x.sign < 0) {
              xs = _negate(xs);
            }
            this.digits = xs;
          }
        }

        FieldResidue.prototype.valueOf = function() {
          return this.toLong().valueOf();
        };

        FieldResidue.prototype.toString = function(radix) {
          return this.toLong().toString(radix);
        };

        FieldResidue.prototype.toLong = function() {
          return new Long(_toLong(this.digits));
        };

        FieldResidue.prototype.negate = function() {
          var z;
          z = new FieldResidue;
          z.digits = _negate(xs.slice());
          return z;
        };

        FieldResidue.prototype.add = function(y) {
          var z;
          if (!(y instanceof FieldResidue)) {
            y = new FieldResidue(y);
          }
          z = new FieldResidue;
          z.digits = _add(this.digits.slice(), y.digits);
          return z;
        };

        FieldResidue.prototype.sub = function(y) {
          return this.add((new FieldResidue(y)).negate());
        };

        FieldResidue.prototype.mul = function(y) {
          var z;
          if (!(y instanceof FieldResidue)) {
            y = new FieldResidue(y);
          }
          z = new FieldResidue;
          z.digits = _mont(this.digits, y.digits);
          return z;
        };

        FieldResidue.prototype.pow = function(y) {
          var z;
          if (!(y instanceof FieldResidue)) {
            y = new FieldResidue(y);
          }
          z = new FieldResidue;
          z.digits = _pow(this.digits, y.digits);
          return z;
        };

        return FieldResidue;

      })(Residue);
    }

    return Field;

  })();

  window.Residue = Residue;

  window.Field = Field;

}).call(this);
